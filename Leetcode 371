# recursion + bit manipulation
class Solution:
    def getSum(self, a: int, b: int) -> int:
        mask = 0xffffffff
        if b == 0: 
            return a
        elif b & mask == 0: 
            if b > 0: # b > 0 means overflow
                return (a & mask)
            else:
                return a 
        # print(a, b)
        return self.getSum(a^b, (a&b)<<1)
        
# Iteration    
class Solution:
    def getSum(self, a: int, b: int) -> int:
        if a == -b:
            return 0
        if a < 0:
            return -self.getSum(-a, -b)
        while b:
            carry = a & b # to keey the bits need to carry forward
            a ^= b # to keep the bits don't need to carry forward.
            b = carry << 1
        return a
